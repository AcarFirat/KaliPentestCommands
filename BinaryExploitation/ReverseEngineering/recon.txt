Tools to gather information about a binary (https://ropemporium.com/guide.html):

	Checking what type of file we are dealing with:

		syntax : file <binary>

	Checking protections (NX/DEP...) enabled on a binary:

		syntax : rabin2 -I <binary>	# apt-get install radare2
		syntax : checksec <binary>

	Checking functions imported from shared libraries:

		syntax : rabin2 -i <binary>
		syntax : rabin2 -qs <binary>
		syntax : readelf -s <binary>

	Checking strings present in a binary:

		syntax : strings <binary>
		syntax : rabin2 -z <binary>	# Only prints strings that were added by a programmer (so not all the default stuff)

	Disassembly of a binary:

		syntax : objdump -d <binary> > <filename>.asm
		syntax : objdump -M <syntax> -d <binary> > <filename>.asm	# specify different disassembly syntax with -M flag
		example: objdump -M intel -d vuln.exe > disassembly_intel.asm

	Check what a binary is actually doing via terminal output:

		syntax : ltrace ./<binary>

	Check function method names of a binary:

		syntax : nm <binary>
	
	Check buffer length needed for overflow:

		Step 1: dmesg -C	-> clear ring buffer
		Step 2: dmesg -t	-> check where crash happened

		Via gdb (with peda installed):
		Step 1: gdb <binary>
		Step 2: pattern_create <length>		-> copy the resulting pattern
		Step 3: run
		Step 4: paste pattern when asked for input
		Step 5: grab the ascii value from EIP (x86) or RSP (x64) -> <value>
		Step 6: pattern_offset <value>
