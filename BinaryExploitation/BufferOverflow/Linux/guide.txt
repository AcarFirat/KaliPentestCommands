See the 'overflow.py' binary and Ippsec's 'Hackthebox October' video! (https://www.youtube.com/watch?v=K05mJazHhF4)

Simplistic view of steps needed to do a buffer overflow attack (first get the binary over to your host machine or to a copy of the victim machine:

Step 1: gdb ./<binary>    # example: gbd ./runme `python -c 'print "A"*200'`
Step 2: b main
Step 3: r (run)	     
Step 4: c (continue)


optionals   : checksec; si (switch to instructions); x/s 0x532b45 (check address); p system (get addr of system); searchmem /bin/sh (search for addr); disas main (disassemble main);
get sys addr: readelf -s /lib/i386-linux-gnu/libc.so.6 | grep system;
get /bin/sh : strings -a -t x /lib/i386-linux-gnu/libc.so.6 | grep /bin/sh

check ASLR  : ldd <binary> | grep libc	                        # if memory address changes everytime, ASLR is enabled
disable ASLR: sudo echo 0 > /proc/sys/kernel/randomize_va_space # disable ASLR, which randomizes libc memory address (requires root access)
exploit dev : locate pattern_ 	                                # /usr/share/../../pattern_create.rb
epxloit dev2: /usr/share/../../pattern_create.rb -l 200 	      # generates a string, run it with the binary in gdb and get the break address
exploit dev3: /usr/share/../../pattern_offset.rb -q 62413762    # get offset of the memory address of the break caused by pat_create string (remove the 0x)
